package simpledb;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private DbIterator child1;
    private DbIterator child2;
    private final JoinPredicate pred;

    private Tuple curr;

    /**
     * Constructor. Accepts to children to join and the predicate to join them on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.child1 = child1;
        this.child2 = child2;
        pred = p;
    }

    /**
     * @return The predicate to use to determine whether two tuples should be joined.
     */
    public JoinPredicate getJoinPredicate() {
        return pred;
    }

    /**
     * @return the field name of join field1. Should be quantified by alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by alias or table name.
     * */
    public String getJoinField2Name() {
        return child2.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.Operator#getTupleDesc()
     */
    @Override
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    /**
     * @see simpledb.Operator#open()
     */
    @Override
    public void open() throws DbException, NoSuchElementException, TransactionAbortedException {
        child1.open();
        child2.open();

        setup();

        super.open();
    }

    /**
     * @see simpledb.Operator#close()
     */
    @Override
    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    /**
     * @see simpledb.DbIterator#rewind()
     */
    @Override
    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();

        setup();
    }

    private void setup() throws NoSuchElementException, DbException, TransactionAbortedException {
        if (child1.hasNext()) {
            curr = child1.next();
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples. Logically, this is the next
     * tuple in r1 cross r2 that satisfies the join predicate. There are many possible implementations; the simplest is
     * a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join are simply the concatenation of joining
     * tuples from the left and right relation. Therefore, if an equality predicate is used there will be two copies of
     * the join attribute in the results. (Removing such duplicate columns can be done with an additional projection
     * operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6}, joined on equality of the first column, then
     * this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    @Override
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (curr != null) {
            while (child2.hasNext()) {
                Tuple next = child2.next();
                if (pred.filter(curr, next)) {
                    return Tuple.merge(curr, next);
                }
            }

            if (child1.hasNext()) {
                curr = child1.next();
                child2.rewind();
            } else {
                curr = null;
            }
        }

        return null;
    }

    /**
     * @see simpledb.Operator#getChildren()
     */
    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[] { child1, child2 };
    }

    /**
     * @see simpledb.Operator#setChildren(simpledb.DbIterator[])
     */
    @Override
    public void setChildren(DbIterator[] children) {
        close();
        child1 = children[0];
        child2 = children[1];
    }
}
